{"ast":null,"code":"var _jsxFileName = \"D:\\\\k8wi__\\\\Desktop\\\\College\\\\FY project\\\\MedMap\\\\client\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport map from '../resources/map.jpeg';\nimport pointer from '../resources/pointer.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [latitude, setLatitude] = React.useState('');\n  const [longitude, setLongitude] = React.useState('');\n  React.useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n    });\n  }, []);\n  function convertCoordinates(actualMapCoordinates, actualMapBounds, targetMapBounds) {\n    // Extract individual coordinates\n    let [x, y] = actualMapCoordinates;\n    let [ax1, ay1, ax2, ay2] = actualMapBounds;\n    let [tx1, ty1, tx2, ty2] = targetMapBounds;\n\n    // Perform linear transformation\n    let targetX = (x - ax1) / (ax2 - ax1) * (tx2 - tx1) + tx1;\n    let targetY = (y - ay1) / (ay2 - ay1) * (ty2 - ty1) + ty1;\n    return [targetX, targetY];\n  }\n\n  // Example usage\n  let actualMapCoordinates = [12.981921, 77.575861];\n  let actualMapBounds = [13.007769, 77.531260, 12.949203, 77.651178];\n  let targetMapBounds = [0, 0, 750, 1475];\n  let targetMapCoordinates = convertCoordinates(actualMapCoordinates, actualMapBounds, targetMapBounds);\n  const lat = targetMapCoordinates[0];\n  const lon = targetMapCoordinates[1];\n  console.log(\"lat=\" + lat);\n  console.log(\"lon=\" + lon);\n  const calculateDynamicPosition = () => {\n    // Replace these calculations with your own logic\n    const dynamicTop = lat; // Replace with your calculated top value\n    const dynamicLeft = lon; // Replace with your calculated left value\n\n    return {\n      top: dynamicTop,\n      left: dynamicLeft\n    };\n  };\n  const {\n    top,\n    left\n  } = calculateDynamicPosition();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      overflow: 'auto',\n      width: '100%',\n      height: '100vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: map,\n        useMap: \"#locate\",\n        alt: \"Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: pointer,\n        className: \"absolute\",\n        style: {\n          top: `${top}px`,\n          left: `${left}px`\n        },\n        alt: \"Pointer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"map\", {\n        name: \"locate\",\n        children: /*#__PURE__*/_jsxDEV(\"area\", {\n          shape: \"rect\",\n          coords: \"831,194,939,378\",\n          href: \"https://www.javatpoint.com/html-tutorial\",\n          title: \"shivajinagar\",\n          alt: \"shivajinagar\",\n          className: \"hover:bg-yellow-500\" // Add this line for highlighting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Jdx9WX5ZHGNvsAFq0Qnd0eO6gns=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","map","pointer","jsxDEV","_jsxDEV","App","_s","latitude","setLatitude","useState","longitude","setLongitude","useEffect","navigator","geolocation","getCurrentPosition","position","coords","convertCoordinates","actualMapCoordinates","actualMapBounds","targetMapBounds","x","y","ax1","ay1","ax2","ay2","tx1","ty1","tx2","ty2","targetX","targetY","targetMapCoordinates","lat","lon","console","log","calculateDynamicPosition","dynamicTop","dynamicLeft","top","left","style","overflow","width","height","children","className","src","useMap","alt","fileName","_jsxFileName","lineNumber","columnNumber","name","shape","href","title","_c","$RefreshReg$"],"sources":["D:/k8wi__/Desktop/College/FY project/MedMap/client/src/pages/Home.js"],"sourcesContent":["import React from \"react\"\r\nimport map from '../resources/map.jpeg'\r\nimport pointer from '../resources/pointer.png'\r\nexport default function App() {\r\n  \r\n  const [latitude, setLatitude] = React.useState('');\r\n  const [longitude, setLongitude] = React.useState('');\r\n\r\n  React.useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      setLatitude(position.coords.latitude);\r\n      setLongitude(position.coords.longitude);\r\n    });\r\n  }, []);\r\n\r\n  \r\n  function convertCoordinates(actualMapCoordinates, actualMapBounds, targetMapBounds) {\r\n    // Extract individual coordinates\r\n    let [x, y] = actualMapCoordinates;\r\n    let [ax1, ay1, ax2, ay2] = actualMapBounds;\r\n    let [tx1, ty1, tx2, ty2] = targetMapBounds;\r\n\r\n    // Perform linear transformation\r\n    let targetX = (x - ax1) / (ax2 - ax1) * (tx2 - tx1) + tx1;\r\n    let targetY = (y - ay1) / (ay2 - ay1) * (ty2 - ty1) + ty1;\r\n\r\n    return [targetX, targetY];\r\n}\r\n\r\n// Example usage\r\nlet actualMapCoordinates = [12.981921, 77.575861];\r\nlet actualMapBounds = [13.007769, 77.531260, 12.949203, 77.651178];\r\nlet targetMapBounds = [0, 0, 750,1475];\r\n\r\nlet targetMapCoordinates = convertCoordinates(actualMapCoordinates, actualMapBounds, targetMapBounds);\r\n\r\n\r\nconst lat=targetMapCoordinates[0];\r\nconst lon=targetMapCoordinates[1];\r\nconsole.log(\"lat=\"+lat);\r\nconsole.log(\"lon=\"+lon);\r\n\r\nconst calculateDynamicPosition = () => {\r\n  // Replace these calculations with your own logic\r\n  const dynamicTop = lat; // Replace with your calculated top value\r\n  const dynamicLeft = lon; // Replace with your calculated left value\r\n\r\n  return { top: dynamicTop, left: dynamicLeft };\r\n}\r\nconst { top, left } = calculateDynamicPosition();\r\n\r\n  return (\r\n    <div style={{ overflow: 'auto', width: '100%', height: '100vh' }}>\r\n  <div className=\"relative\">\r\n    <img src={map} useMap=\"#locate\" alt=\"Map\"/>\r\n    <img src={pointer} className=\"absolute\" style={{ top: `${top}px`, left: `${left}px` }} alt=\"Pointer\"/>\r\n    <map name='locate'>\r\n      <area\r\n        shape=\"rect\"\r\n        coords=\"831,194,939,378\"\r\n        href=\"https://www.javatpoint.com/html-tutorial\"\r\n        title=\"shivajinagar\"\r\n        alt=\"shivajinagar\"\r\n        className=\"hover:bg-yellow-500\" // Add this line for highlighting\r\n      />\r\n    </map>\r\n  </div>\r\n</div>\r\n  );\r\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}